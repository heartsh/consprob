use utils::*;
lazy_static! {
  pub static ref STEM_PARAMS: StemParams = {
    StemParams {
      lbaps_with_base_pairs: [((C, PSEUDO_BASE), 0f64), ((PSEUDO_BASE, C), 0f64), ((C, C), -2.3917211731633055f64), ((C, U), -3.144829424986153f64), ((U, C), -3.144829424986153f64), ((G, PSEUDO_BASE), 0f64), ((PSEUDO_BASE, G), 0f64), ((G, U), -3.5311263107035726f64), ((U, G), -3.5311263107035726f64), ((C, G), -3.838008603527469f64), ((G, C), -3.838008603527469f64), ((A, G), -3.0650613037144936f64), ((G, A), -3.0650613037144936f64), ((G, G), -2.13197812362999f64), ((PSEUDO_BASE, PSEUDO_BASE), 0f64), ((A, A), -1.8284678271716743f64), ((A, PSEUDO_BASE), 0f64), ((PSEUDO_BASE, A), 0f64), ((A, U), -3.012308169137413f64), ((U, A), -3.012308169137413f64), ((U, PSEUDO_BASE), 0f64), ((PSEUDO_BASE, U), 0f64), ((A, C), -3.5082869646677226f64), ((C, A), -3.5082869646677226f64), ((U, U), -2.336175935977055f64), ].iter().cloned().collect(),
      logps_with_bases: [(G, -4.617089077540939f64), (A, -4.357196730518779f64), (U, -4.466813340129337f64), (C, -4.7081366637396345f64), (PSEUDO_BASE, 0f64), ].iter().cloned().collect(),
      legps_with_bases: [(G, -3.9470427099203835f64), (A, -3.6972470456033983f64), (U, -3.757897970615967f64), (C, -4.025094237858682f64), (PSEUDO_BASE, 0f64), ].iter().cloned().collect(),
      lbpaps_with_base_quadruples_1: [((C, G, G, C), -6.120157359414484f64), ((G, C, C, G), -6.120157359414484f64), ((A, U, A, U), -5.369821767864317f64), ((U, G, U, G), -6.969952387883658f64), ((G, C, G, U), -6.625071730641603f64), ((G, U, G, C), -6.625071730641603f64), ((G, U, U, G), -9.099308165752445f64), ((U, G, G, U), -9.099308165752445f64), ((C, G, U, G), -6.657803425922553f64), ((U, G, C, G), -6.657803425922553f64), ((G, U, G, U), -6.775010235542992f64), ((G, C, U, A), -6.64344846717988f64), ((U, A, G, C), -6.64344846717988f64), ((G, U, U, A), -8.22344816057073f64), ((U, A, G, U), -8.22344816057073f64), ((A, U, U, A), -6.40892227204802f64), ((U, A, A, U), -6.40892227204802f64), ((G, C, G, C), -4.522539869995038f64), ((A, U, G, U), -6.9665828224188555f64), ((G, U, A, U), -6.9665828224188555f64), ((A, U, G, C), -5.75081633821137f64), ((G, C, A, U), -5.75081633821137f64), ((C, G, G, U), -7.7342811781791f64), ((G, U, C, G), -7.7342811781791f64), ((A, U, U, G), -8.27204188546738f64), ((U, G, A, U), -8.27204188546738f64), ((U, A, U, A), -5.019415598648154f64), ((C, G, C, G), -4.394873674037929f64), ((G, C, U, G), -7.9616965370652295f64), ((U, G, G, C), -7.9616965370652295f64), ((C, G, U, A), -5.512353224903258f64), ((U, A, C, G), -5.512353224903258f64), ((A, U, C, G), -6.50873062030268f64), ((C, G, A, U), -6.50873062030268f64), ((U, A, U, G), -7.057867225511414f64), ((U, G, U, A), -7.057867225511414f64), ].iter().cloned().collect(),
      lbpaps_with_base_quadruples_2: [((U, G, PSEUDO_BASE, C), 0f64), ((C, G, G, C), -6.120157359414484f64), ((A, U, A, U), -4.676674587304372f64), ((A, U, C, PSEUDO_BASE), 0f64), ((U, G, PSEUDO_BASE, PSEUDO_BASE), 0f64), ((G, U, G, C), -6.625071730641603f64), ((U, A, C, PSEUDO_BASE), 0f64), ((C, G, A, U), -6.50873062030268f64), ((G, C, U, PSEUDO_BASE), 0f64), ((G, U, PSEUDO_BASE, G), 0f64), ((A, U, G, PSEUDO_BASE), 0f64), ((C, G, A, A), -8.49875799813629f64), ((G, C, G, C), -3.8293926894350925f64), ((U, A, U, U), -8.20659713007831f64), ((U, G, G, A), -9.819275911997577f64), ((U, A, G, PSEUDO_BASE), 0f64), ((U, A, U, A), -4.326268418088208f64), ((U, G, G, U), -9.099308165752445f64), ((U, A, G, U), -8.22344816057073f64), ((U, A, G, C), -6.64344846717988f64), ((G, C, A, A), -8.820756042526837f64), ((G, C, G, PSEUDO_BASE), 0f64), ((G, U, G, PSEUDO_BASE), 0f64), ((G, U, A, G), -9.648857388684291f64), ((A, U, U, U), -8.32989079037055f64), ((G, U, C, PSEUDO_BASE), 0f64), ((U, G, U, U), -9.20783513808858f64), ((G, U, U, A), -8.22344816057073f64), ((G, C, C, PSEUDO_BASE), 0f64), ((A, U, C, C), -10.20121316225569f64), ((A, U, U, A), -6.40892227204802f64), ((U, G, C, PSEUDO_BASE), 0f64), ((U, G, U, A), -7.057867225511414f64), ((G, U, U, U), -8.949317666557658f64), ((G, U, A, PSEUDO_BASE), 0f64), ((G, C, C, C), -9.262704958522502f64), ((U, G, C, U), -10.06732846047159f64), ((C, G, G, U), -7.7342811781791f64), ((A, U, A, C), -8.355373343487601f64), ((U, G, C, A), -8.859769367301153f64), ((C, G, C, A), -7.896485193500832f64), ((G, C, PSEUDO_BASE, PSEUDO_BASE), 0f64), ((G, U, PSEUDO_BASE, A), 0f64), ((G, U, PSEUDO_BASE, U), 0f64), ((U, G, A, PSEUDO_BASE), 0f64), ((A, U, PSEUDO_BASE, U), 0f64), ((U, A, A, U), -6.40892227204802f64), ((A, U, PSEUDO_BASE, C), 0f64), ((U, G, A, C), -10.492922067148028f64), ((U, A, PSEUDO_BASE, U), 0f64), ((C, G, PSEUDO_BASE, A), 0f64), ((U, A, G, G), -9.349080768261766f64), ((U, A, PSEUDO_BASE, C), 0f64), ((U, A, U, PSEUDO_BASE), 0f64), ((A, U, G, C), -5.75081633821137f64), ((G, C, PSEUDO_BASE, U), 0f64), ((C, G, C, PSEUDO_BASE), 0f64), ((G, C, PSEUDO_BASE, A), 0f64), ((C, G, U, U), -8.455217759484889f64), ((G, U, A, C), -9.408020137627869f64), ((U, G, PSEUDO_BASE, U), 0f64), ((U, G, U, G), -6.276805207323712f64), ((U, G, PSEUDO_BASE, A), 0f64), ((G, U, C, C), -10.542786940400289f64), ((G, C, C, G), -6.120157359414484f64), ((A, U, U, PSEUDO_BASE), 0f64), ((A, U, A, G), -9.129340284410423f64), ((U, G, U, PSEUDO_BASE), 0f64), ((G, U, G, U), -6.081863054983047f64), ((G, U, G, A), -8.975429565377164f64), ((C, G, A, G), -8.192208715865377f64), ((A, U, PSEUDO_BASE, G), 0f64), ((U, A, A, C), -8.654215145922961f64), ((U, A, U, G), -7.057867225511414f64), ((U, G, A, G), -9.329973025247325f64), ((C, G, PSEUDO_BASE, G), 0f64), ((U, A, A, PSEUDO_BASE), 0f64), ((U, A, PSEUDO_BASE, G), 0f64), ((G, C, A, G), -9.239745750687284f64), ((G, C, U, C), -8.77010379156657f64), ((A, U, G, G), -9.674696865899167f64), ((G, U, PSEUDO_BASE, PSEUDO_BASE), 0f64), ((C, G, A, PSEUDO_BASE), 0f64), ((U, A, C, U), -9.49357925524506f64), ((G, C, PSEUDO_BASE, G), 0f64), ((U, A, C, A), -8.11031139108765f64), ((C, G, G, PSEUDO_BASE), 0f64), ((G, U, U, C), -9.997395425016713f64), ((G, U, A, U), -6.9665828224188555f64), ((C, G, U, C), -9.424097532426085f64), ((A, U, U, G), -8.27204188546738f64), ((U, G, U, C), -9.833507569911594f64), ((G, U, C, G), -7.7342811781791f64), ((C, G, G, A), -8.882015954330063f64), ((A, U, A, A), -8.267168014835816f64), ((C, G, U, PSEUDO_BASE), 0f64), ((U, G, C, G), -6.657803425922553f64), ((C, G, C, U), -8.666808492087723f64), ((C, G, C, C), -9.196476424307592f64), ((G, C, G, U), -6.625071730641603f64), ((C, G, A, C), -8.5834455253243f64), ((G, C, G, A), -8.404036172383742f64), ((C, G, PSEUDO_BASE, PSEUDO_BASE), 0f64), ((U, G, G, C), -7.9616965370652295f64), ((U, A, A, G), -8.685535122868178f64), ((U, A, U, C), -8.856275326397153f64), ((U, A, PSEUDO_BASE, PSEUDO_BASE), 0f64), ((C, G, PSEUDO_BASE, C), 0f64), ((U, G, G, PSEUDO_BASE), 0f64), ((U, A, G, A), -8.597094100886556f64), ((G, C, A, C), -7.923402376383736f64), ((G, C, U, G), -7.9616965370652295f64), ((G, C, A, U), -5.75081633821137f64), ((U, A, C, G), -5.512353224903258f64), ((G, C, PSEUDO_BASE, C), 0f64), ((A, U, C, U), -9.098645402003452f64), ((G, U, U, G), -9.099308165752445f64), ((C, G, U, G), -6.657803425922553f64), ((A, U, C, A), -9.125164438558237f64), ((A, U, U, C), -9.782833278948328f64), ((U, G, PSEUDO_BASE, G), 0f64), ((G, U, C, A), -10.516004778640099f64), ((C, G, G, G), -8.778987770101441f64), ((G, C, C, A), -9.221070101217492f64), ((G, U, U, PSEUDO_BASE), 0f64), ((G, U, C, U), -9.83126509419971f64), ((U, G, C, C), -10.82180960528093f64), ((G, C, C, U), -9.511272247064538f64), ((G, U, G, G), -9.77059655249989f64), ((C, G, C, G), -3.7017264934779837f64), ((G, C, A, PSEUDO_BASE), 0f64), ((G, U, PSEUDO_BASE, C), 0f64), ((G, C, G, G), -8.987534556352776f64), ((U, G, G, G), -9.577923353898283f64), ((A, U, PSEUDO_BASE, A), 0f64), ((U, A, A, A), -8.465570875480847f64), ((U, G, A, A), -9.821434758421768f64), ((U, G, A, U), -8.27204188546738f64), ((A, U, PSEUDO_BASE, PSEUDO_BASE), 0f64), ((C, G, PSEUDO_BASE, U), 0f64), ((U, A, PSEUDO_BASE, A), 0f64), ((G, C, U, A), -6.64344846717988f64), ((A, U, G, A), -8.842676407846373f64), ((G, C, U, U), -8.500410953738792f64), ((A, U, G, U), -6.9665828224188555f64), ((U, A, C, C), -9.9212937430325f64), ((G, U, A, A), -9.723455108370066f64), ((C, G, U, A), -5.512353224903258f64), ((A, U, C, G), -6.50873062030268f64), ((A, U, A, PSEUDO_BASE), 0f64), ].iter().cloned().collect(),
      logpps_with_base_pairs: [((U, A), -6.8621754551705845f64), ((G, U), -8.517663714263321f64), ((C, G), -6.451232820630477f64), ((U, G), -7.876695255550433f64), ((A, U), -6.682664582789676f64), ((G, C), -6.786250478002439f64), ].iter().cloned().collect(),
      legpps_with_base_pairs: [((U, A), -9.65101333633936f64), ((G, U), -10.003312803276277f64), ((C, G), -9.124087798703565f64), ((U, G), -10.548771820084587f64), ((A, U), -9.843690485950136f64), ((G, C), -9.282215529456884f64), ].iter().cloned().collect(),
      llgps_with_base_triples: [((U, G, U), -11.36315077297287f64), ((U, A, U), -10.52217481649568f64), ((U, G, PSEUDO_BASE), 0f64), ((C, G, C), -9.79899602702159f64), ((U, A, A), -9.680953506256342f64), ((A, U, C), -9.970168752430146f64), ((G, U, G), -11.656607302903902f64), ((A, U, U), -9.996988617769933f64), ((A, U, PSEUDO_BASE), 0f64), ((C, G, U), -10.282954881790655f64), ((G, U, U), -10.747613262678229f64), ((A, U, G), -10.526539629306388f64), ((U, G, G), -10.763826704122296f64), ((G, U, A), -11.585762974646524f64), ((G, C, A), -10.15713381964147f64), ((G, C, U), -10.256070585068468f64), ((U, A, C), -10.232374644960812f64), ((G, C, PSEUDO_BASE), 0f64), ((U, G, C), -11.423393458700836f64), ((U, A, PSEUDO_BASE), 0f64), ((G, C, G), -10.339757753278846f64), ((C, G, A), -9.7872754151843f64), ((U, A, G), -10.524929323000283f64), ((A, U, A), -10.376723347101779f64), ((C, G, PSEUDO_BASE), 0f64), ((G, C, C), -9.421234771152681f64), ((G, U, PSEUDO_BASE), 0f64), ((C, G, G), -9.520447968716823f64), ((U, G, A), -11.059322842511152f64), ((G, U, C), -11.055017552103758f64), ].iter().cloned().collect(),
      lrgps_with_base_triples: [((U, G, U), -10.760766592444702f64), ((U, A, U), -9.692835031032846f64), ((U, G, PSEUDO_BASE), 0f64), ((C, G, C), -9.3389194417241f64), ((U, A, A), -10.108832505717388f64), ((A, U, C), -9.946108912152223f64), ((G, U, G), -10.654315445203144f64), ((A, U, U), -10.26613422932423f64), ((A, U, PSEUDO_BASE), 0f64), ((C, G, U), -10.009883219083727f64), ((G, U, U), -11.762522339905203f64), ((A, U, G), -10.584599050913276f64), ((U, G, G), -11.488402501655774f64), ((G, U, A), -10.96488665610941f64), ((G, C, A), -8.8617714571064f64), ((G, C, U), -10.342052428728799f64), ((U, A, C), -9.38813269534815f64), ((G, C, PSEUDO_BASE), 0f64), ((U, G, C), -10.88550303562401f64), ((U, A, PSEUDO_BASE), 0f64), ((G, C, G), -9.418874393919443f64), ((C, G, A), -9.792400099219755f64), ((U, A, G), -10.78969849970844f64), ((A, U, A), -9.18892464074979f64), ((C, G, PSEUDO_BASE), 0f64), ((G, C, C), -10.31971359162042f64), ((G, U, PSEUDO_BASE), 0f64), ((C, G, G), -10.348004827256094f64), ((U, G, A), -11.070961202500893f64), ((G, U, C), -10.774537686135343f64), ].iter().cloned().collect(),
      lbps_with_bases: [(G, -1.3661460514099177f64), (A, -1.3537389623203675f64), (U, -1.3574620227820455f64), (C, -1.4726104829283444f64), (PSEUDO_BASE, 0f64), ].iter().cloned().collect(),
    }
  };
}