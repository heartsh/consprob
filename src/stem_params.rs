use utils::*;
lazy_static! {
  pub static ref STEM_PARAMS: StemParams = {
    StemParams {
      lbaps_with_base_pairs: [((C, PSEUDO_BASE), 0e0), ((PSEUDO_BASE, C), 0e0), ((C, C), -2.6185487088559976e0), ((C, U), -3.3701107170766145e0), ((U, C), -3.3701107170766145e0), ((G, PSEUDO_BASE), 0e0), ((PSEUDO_BASE, G), 0e0), ((G, U), -3.6777756598875393e0), ((U, G), -3.6777756598875393e0), ((C, G), -4.109395661377414e0), ((G, C), -4.109395661377414e0), ((A, G), -3.256164109583031e0), ((G, A), -3.256164109583031e0), ((G, G), -2.3305876853778735e0), ((PSEUDO_BASE, PSEUDO_BASE), 0e0), ((A, A), -1.8371069572308685e0), ((A, PSEUDO_BASE), 0e0), ((PSEUDO_BASE, A), 0e0), ((A, U), -3.0612856869956184e0), ((U, A), -3.0612856869956184e0), ((U, PSEUDO_BASE), 0e0), ((PSEUDO_BASE, U), 0e0), ((A, C), -3.5918366631073653e0), ((C, A), -3.5918366631073653e0), ((U, U), -2.44259741748736e0), ].iter().cloned().collect(),
      logps_with_bases: [(G, -4.89453527506051e0), (A, -4.459204904879627e0), (U, -4.651472104676958e0), (C, -4.9575246663723185e0), (PSEUDO_BASE, 0e0), ].iter().cloned().collect(),
      legps_with_bases: [(G, -3.8980224407260864e0), (A, -3.636730755970867e0), (U, -3.7009074700185765e0), (C, -3.971724614546179e0), (PSEUDO_BASE, 0e0), ].iter().cloned().collect(),
      lbpaps_with_base_quadruples_1: [((C, G, G, C), -4.875719873170855e0), ((G, C, C, G), -4.875719873170855e0), ((A, U, A, U), -4.1253842816035045e0), ((U, G, U, G), -5.725514901679094e0), ((G, C, G, U), -5.38063424441936e0), ((G, U, G, C), -5.38063424441936e0), ((G, U, U, G), -7.854870679546119e0), ((U, G, G, U), -7.854870679546119e0), ((C, G, U, G), -5.4133659397021034e0), ((U, G, C, G), -5.4133659397021034e0), ((G, U, G, U), -5.530572749329475e0), ((G, C, U, A), -5.399010980958637e0), ((U, A, G, C), -5.399010980958637e0), ((G, U, U, A), -6.979010674365569e0), ((U, A, G, U), -6.979010674365569e0), ((A, U, U, A), -5.164484785815291e0), ((U, A, A, U), -5.164484785815291e0), ((G, C, G, C), -3.2781023838773145e0), ((A, U, G, U), -5.722145336214292e0), ((G, U, A, U), -5.722145336214292e0), ((A, U, G, C), -4.506378851957686e0), ((G, C, A, U), -4.506378851957686e0), ((C, G, G, U), -6.489843691974263e0), ((G, U, C, G), -6.489843691974263e0), ((A, U, U, G), -7.027604399262177e0), ((U, G, A, U), -7.027604399262177e0), ((U, A, U, A), -3.7749781123827955e0), ((C, G, C, G), -3.150436187970116e0), ((G, C, U, G), -6.717259050860262e0), ((U, G, G, C), -6.717259050860262e0), ((C, G, U, A), -4.2679157386448e0), ((U, A, C, G), -4.2679157386448e0), ((A, U, C, G), -5.264293134074512e0), ((C, G, A, U), -5.264293134074512e0), ((U, A, U, G), -5.813429739306828e0), ((U, G, U, A), -5.813429739306828e0), ].iter().cloned().collect(),
      lbpaps_with_base_quadruples_2: [((U, G, PSEUDO_BASE, C), 0e0), ((C, G, G, C), -7.072944450572007e0), ((A, U, A, U), -5.629461678324691e0), ((A, U, C, PSEUDO_BASE), 0e0), ((U, G, PSEUDO_BASE, PSEUDO_BASE), 0e0), ((G, U, G, C), -7.5778588217923595e0), ((U, A, C, PSEUDO_BASE), 0e0), ((C, G, A, U), -7.46151771145531e0), ((G, C, U, PSEUDO_BASE), 0e0), ((G, U, PSEUDO_BASE, G), 0e0), ((A, U, G, PSEUDO_BASE), 0e0), ((C, G, A, A), -7.842107176830115e0), ((G, C, G, C), -4.782179780501737e0), ((U, A, U, U), -7.549946308773427e0), ((U, G, G, A), -9.162625090692776e0), ((U, A, G, PSEUDO_BASE), 0e0), ((U, A, U, A), -5.279055509247718e0), ((U, G, G, U), -1.0052095256880481e1), ((U, A, G, U), -9.176235251698394e0), ((U, A, G, C), -7.596235558330319e0), ((G, C, A, A), -8.164105221220863e0), ((G, C, G, PSEUDO_BASE), 0e0), ((G, U, G, PSEUDO_BASE), 0e0), ((G, U, A, G), -8.99220656737925e0), ((A, U, U, U), -7.673239969064845e0), ((G, U, C, PSEUDO_BASE), 0e0), ((U, G, U, U), -8.551184316782948e0), ((G, U, U, A), -9.176235251698394e0), ((G, C, C, PSEUDO_BASE), 0e0), ((A, U, C, C), -9.544562340950833e0), ((A, U, U, A), -7.361709363202094e0), ((U, G, C, PSEUDO_BASE), 0e0), ((U, G, U, A), -8.010654316652927e0), ((G, U, U, U), -8.292666845251784e0), ((G, U, A, PSEUDO_BASE), 0e0), ((G, C, C, C), -8.60605413721693e0), ((U, G, C, U), -9.410677639166755e0), ((C, G, G, U), -8.687068269306664e0), ((A, U, A, C), -7.698722522181713e0), ((U, G, C, A), -8.203118545995206e0), ((C, G, C, A), -7.239834372197621e0), ((G, C, PSEUDO_BASE, PSEUDO_BASE), 0e0), ((G, U, PSEUDO_BASE, A), 0e0), ((G, U, PSEUDO_BASE, U), 0e0), ((U, G, A, PSEUDO_BASE), 0e0), ((A, U, PSEUDO_BASE, U), 0e0), ((U, A, A, U), -7.361709363202094e0), ((A, U, PSEUDO_BASE, C), 0e0), ((U, G, A, C), -9.836271245843111e0), ((U, A, PSEUDO_BASE, U), 0e0), ((C, G, PSEUDO_BASE, A), 0e0), ((U, A, G, G), -8.692429946956295e0), ((U, A, PSEUDO_BASE, C), 0e0), ((U, A, U, PSEUDO_BASE), 0e0), ((A, U, G, C), -6.703603429372073e0), ((G, C, PSEUDO_BASE, U), 0e0), ((C, G, C, PSEUDO_BASE), 0e0), ((G, C, PSEUDO_BASE, A), 0e0), ((C, G, U, U), -7.798566938178692e0), ((G, U, A, C), -8.751369316322473e0), ((U, G, PSEUDO_BASE, U), 0e0), ((U, G, U, G), -7.229592298479488e0), ((U, G, PSEUDO_BASE, A), 0e0), ((G, U, C, C), -9.88613611909536e0), ((G, C, C, G), -7.072944450572007e0), ((A, U, U, PSEUDO_BASE), 0e0), ((A, U, A, G), -8.472689463104711e0), ((U, G, U, PSEUDO_BASE), 0e0), ((G, U, G, U), -7.034650146140956e0), ((G, U, G, A), -8.31877874407131e0), ((C, G, A, G), -7.535557894560584e0), ((A, U, PSEUDO_BASE, G), 0e0), ((U, A, A, C), -7.997564324616875e0), ((U, A, U, G), -8.010654316652927e0), ((U, G, A, G), -8.673322203941831e0), ((C, G, PSEUDO_BASE, G), 0e0), ((U, A, A, PSEUDO_BASE), 0e0), ((U, A, PSEUDO_BASE, G), 0e0), ((G, C, A, G), -8.583094929381685e0), ((G, C, U, C), -8.11345297026056e0), ((A, U, G, G), -9.018046044594168e0), ((G, U, PSEUDO_BASE, PSEUDO_BASE), 0e0), ((C, G, A, PSEUDO_BASE), 0e0), ((U, A, C, U), -8.83692843393978e0), ((G, C, PSEUDO_BASE, G), 0e0), ((U, A, C, A), -7.453660569783344e0), ((C, G, G, PSEUDO_BASE), 0e0), ((G, U, U, C), -9.340744603711888e0), ((G, U, A, U), -7.919369913562663e0), ((C, G, U, C), -8.76744671112071e0), ((A, U, U, G), -9.224828976595058e0), ((U, G, U, C), -9.176856748606793e0), ((G, U, C, G), -8.687068269306664e0), ((C, G, G, A), -8.225365133024136e0), ((A, U, A, A), -7.610517193530543e0), ((C, G, U, PSEUDO_BASE), 0e0), ((U, G, C, G), -7.61059051707274e0), ((C, G, C, U), -8.010157670781645e0), ((C, G, C, C), -8.53982560300195e0), ((G, C, G, U), -7.5778588217923595e0), ((C, G, A, C), -7.926794704018173e0), ((G, C, G, A), -7.747385351077521e0), ((C, G, PSEUDO_BASE, PSEUDO_BASE), 0e0), ((U, G, G, C), -8.914483628192833e0), ((U, A, A, G), -8.028884301562112e0), ((U, A, U, C), -8.199624505091204e0), ((U, A, PSEUDO_BASE, PSEUDO_BASE), 0e0), ((C, G, PSEUDO_BASE, C), 0e0), ((U, G, G, PSEUDO_BASE), 0e0), ((U, A, G, A), -7.940443279580437e0), ((G, C, A, C), -7.2667515550804e0), ((G, C, U, G), -8.914483628192833e0), ((G, C, A, U), -6.703603429372073e0), ((U, A, C, G), -6.465140316065472e0), ((G, C, PSEUDO_BASE, C), 0e0), ((A, U, C, U), -8.44199458069771e0), ((G, U, U, G), -1.0052095256880481e1), ((C, G, U, G), -7.61059051707274e0), ((A, U, C, A), -8.468513617252519e0), ((A, U, U, C), -9.126182457643525e0), ((U, G, PSEUDO_BASE, G), 0e0), ((G, U, C, A), -9.859353957335175e0), ((C, G, G, G), -8.122336948795438e0), ((G, C, C, A), -8.564419279911874e0), ((G, U, U, PSEUDO_BASE), 0e0), ((G, U, C, U), -9.174614272894907e0), ((U, G, C, C), -1.0165158783975917e1), ((G, C, C, U), -8.854621425759282e0), ((G, U, G, G), -9.113945731195065e0), ((C, G, C, G), -4.654513584440482e0), ((G, C, A, PSEUDO_BASE), 0e0), ((G, U, PSEUDO_BASE, C), 0e0), ((G, C, G, G), -8.330883735046934e0), ((U, G, G, G), -8.921272532593127e0), ((A, U, PSEUDO_BASE, A), 0e0), ((U, A, A, A), -7.8089200541746555e0), ((U, G, A, A), -9.164783937116969e0), ((U, G, A, U), -9.224828976595058e0), ((A, U, PSEUDO_BASE, PSEUDO_BASE), 0e0), ((C, G, PSEUDO_BASE, U), 0e0), ((U, A, PSEUDO_BASE, A), 0e0), ((G, C, U, A), -7.596235558330319e0), ((A, U, G, A), -8.186025586540413e0), ((G, C, U, U), -7.843760132432619e0), ((A, U, G, U), -7.919369913562663e0), ((U, A, C, C), -9.264642921727686e0), ((G, U, A, A), -9.066804287065155e0), ((C, G, U, A), -6.465140316065472e0), ((A, U, C, G), -7.46151771145531e0), ((A, U, A, PSEUDO_BASE), 0e0), ].iter().cloned().collect(),
      logpps_with_base_pairs: [((U, A), -6.205524633865778e0), ((G, U), -7.861012892957157e0), ((C, G), -5.794581999316861e0), ((U, G), -7.2200444342473125e0), ((A, U), -6.0260137614805735e0), ((G, C), -6.129599656695722e0), ].iter().cloned().collect(),
      legpps_with_base_pairs: [((U, A), -8.994362515034323e0), ((G, U), -9.346661981971451e0), ((C, G), -8.467436977397846e0), ((U, G), -9.892120998779655e0), ((A, U), -9.187039664645333e0), ((G, C), -8.625564708151334e0), ].iter().cloned().collect(),
      llgps_with_base_triples: [((U, G, U), -1.0706499951667723e1), ((U, A, U), -9.865523995190754e0), ((U, G, PSEUDO_BASE), 0e0), ((C, G, C), -9.142345205716792e0), ((U, A, A), -9.024302684951355e0), ((A, U, C), -9.313517931125325e0), ((G, U, G), -1.0999956481598767e1), ((A, U, U), -9.340337796465109e0), ((A, U, PSEUDO_BASE), 0e0), ((C, G, U), -9.626304060485783e0), ((G, U, U), -1.009096244137324e1), ((A, U, G), -9.86988880800146e0), ((U, G, G), -1.0107175882817304e1), ((G, U, A), -1.0929112153341386e1), ((G, C, A), -9.50048299833662e0), ((G, C, U), -9.599419763763601e0), ((U, A, C), -9.575723823655949e0), ((G, C, PSEUDO_BASE), 0e0), ((U, G, C), -1.076674263739569e1), ((U, A, PSEUDO_BASE), 0e0), ((G, C, G), -9.683106931973962e0), ((C, G, A), -9.130624593879505e0), ((U, A, G), -9.868278501695357e0), ((A, U, A), -9.720072525796887e0), ((C, G, PSEUDO_BASE), 0e0), ((G, C, C), -8.764583949847303e0), ((G, U, PSEUDO_BASE), 0e0), ((C, G, G), -8.863797147411582e0), ((U, G, A), -1.040267202120605e1), ((G, U, C), -1.0398366730798656e1), ].iter().cloned().collect(),
      lrgps_with_base_triples: [((U, G, U), -1.010411577113971e1), ((U, A, U), -9.03618420972788e0), ((U, G, PSEUDO_BASE), 0e0), ((C, G, C), -8.682268620418617e0), ((U, A, A), -9.452181684412546e0), ((A, U, C), -9.289458090847408e0), ((G, U, G), -9.997664623898185e0), ((A, U, U), -9.60948340801936e0), ((A, U, PSEUDO_BASE), 0e0), ((C, G, U), -9.353232397778902e0), ((G, U, U), -1.1105871518600075e1), ((A, U, G), -9.927948229608337e0), ((U, G, G), -1.0831751680350632e1), ((G, U, A), -1.0308235834804346e1), ((G, C, A), -8.205120635800457e0), ((G, C, U), -9.685401607423914e0), ((U, A, C), -8.731481874042728e0), ((G, C, PSEUDO_BASE), 0e0), ((U, G, C), -1.0228852214318977e1), ((U, A, PSEUDO_BASE), 0e0), ((G, C, G), -8.762223572614062e0), ((C, G, A), -9.135749277914957e0), ((U, A, G), -1.0133047678403438e1), ((A, U, A), -8.532273819444137e0), ((C, G, PSEUDO_BASE), 0e0), ((G, C, C), -9.66306277031554e0), ((G, U, PSEUDO_BASE), 0e0), ((C, G, G), -9.69135400595121e0), ((U, G, A), -1.0414310381195786e1), ((G, U, C), -1.0117886864830346e1), ].iter().cloned().collect(),
      lbps_with_bases: [(G, -1.3661460514099177e0), (A, -1.3537389623203675e0), (U, -1.3574620227820455e0), (C, -1.4726104829283444e0), (PSEUDO_BASE, 0e0), ].iter().cloned().collect(),
    }
  };
}