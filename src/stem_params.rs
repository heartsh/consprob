use utils::*;
lazy_static! {
  pub static ref STEM_PARAMS: StemParams = {
    StemParams {
      lbaps_with_base_pairs: [((C, C), -2.3917211731633055), ((C, U), -3.144829424986153), ((U, C), -3.144829424986153), ((G, U), -3.5311263107035726), ((U, G), -3.5311263107035726), ((C, G), -3.838008603527469), ((G, C), -3.838008603527469), ((A, G), -3.0650613037144936), ((G, A), -3.0650613037144936), ((G, G), -2.13197812362999), ((A, A), -1.8284678271716743), ((A, U), -3.012308169137413), ((U, A), -3.012308169137413), ((A, C), -3.5082869646677226), ((C, A), -3.5082869646677226), ((U, U), -2.336175935977055), ].iter().cloned().collect(),
      logps_with_bases: [(G, -4.617089077540939), (A, -4.357196730518779), (U, -4.466813340129337), (C, -4.7081366637396345), ].iter().cloned().collect(),
      legps_with_bases: [(G, -3.9470427099203835), (A, -3.6972470456033983), (U, -3.757897970615967), (C, -4.025094237858682), ].iter().cloned().collect(),
      lbpaps_with_base_quadruples_1: [((C, G, G, C), -6.120157359414484), ((G, C, C, G), -6.120157359414484), ((A, U, A, U), -5.369821767864317), ((U, G, U, G), -6.969952387883658), ((G, C, G, U), -6.625071730641603), ((G, U, G, C), -6.625071730641603), ((G, U, U, G), -9.099308165752445), ((U, G, G, U), -9.099308165752445), ((C, G, U, G), -6.657803425922553), ((U, G, C, G), -6.657803425922553), ((G, U, G, U), -6.775010235542992), ((G, C, U, A), -6.64344846717988), ((U, A, G, C), -6.64344846717988), ((G, U, U, A), -8.22344816057073), ((U, A, G, U), -8.22344816057073), ((A, U, U, A), -6.40892227204802), ((U, A, A, U), -6.40892227204802), ((G, C, G, C), -4.522539869995038), ((A, U, G, U), -6.9665828224188555), ((G, U, A, U), -6.9665828224188555), ((A, U, G, C), -5.75081633821137), ((G, C, A, U), -5.75081633821137), ((C, G, G, U), -7.7342811781791), ((G, U, C, G), -7.7342811781791), ((A, U, U, G), -8.27204188546738), ((U, G, A, U), -8.27204188546738), ((U, A, U, A), -5.019415598648154), ((C, G, C, G), -4.394873674037929), ((G, C, U, G), -7.9616965370652295), ((U, G, G, C), -7.9616965370652295), ((C, G, U, A), -5.512353224903258), ((U, A, C, G), -5.512353224903258), ((A, U, C, G), -6.50873062030268), ((C, G, A, U), -6.50873062030268), ((U, A, U, G), -7.057867225511414), ((U, G, U, A), -7.057867225511414), ].iter().cloned().collect(),
      lbpaps_with_base_quadruples_2: [((U, A, A, C), -8.654215145922961), ((C, G, G, C), -6.120157359414484), ((U, G, A, G), -9.329973025247325), ((A, U, A, U), -4.676674587304372), ((G, C, A, G), -9.239745750687284), ((G, C, U, C), -8.77010379156657), ((A, U, G, G), -9.674696865899167), ((G, U, G, C), -6.625071730641603), ((C, G, A, U), -6.50873062030268), ((U, A, C, U), -9.49357925524506), ((C, G, A, A), -8.49875799813629), ((G, C, G, C), -3.8293926894350925), ((U, A, C, A), -8.11031139108765), ((U, A, U, U), -8.20659713007831), ((G, U, U, C), -9.997395425016713), ((U, G, G, A), -9.819275911997577), ((C, G, U, C), -9.424097532426085), ((G, U, A, U), -6.9665828224188555), ((A, U, U, G), -8.27204188546738), ((U, G, G, U), -9.099308165752445), ((U, G, U, C), -9.833507569911594), ((U, A, U, A), -4.326268418088208), ((U, A, G, U), -8.22344816057073), ((G, U, C, G), -7.7342811781791), ((C, G, G, A), -8.882015954330063), ((A, U, A, A), -8.267168014835816), ((U, A, G, C), -6.64344846717988), ((U, G, C, G), -6.657803425922553), ((G, C, A, A), -8.820756042526837), ((C, G, C, U), -8.666808492087723), ((C, G, C, C), -9.196476424307592), ((G, C, G, U), -6.625071730641603), ((C, G, A, C), -8.5834455253243), ((G, C, G, A), -8.404036172383742), ((G, U, A, G), -9.648857388684291), ((A, U, U, U), -8.32989079037055), ((G, U, U, A), -8.22344816057073), ((U, G, G, C), -7.9616965370652295), ((U, G, U, U), -9.20783513808858), ((A, U, C, C), -10.20121316225569), ((A, U, U, A), -6.40892227204802), ((U, A, U, C), -8.856275326397153), ((G, U, U, U), -8.949317666557658), ((U, G, U, A), -7.057867225511414), ((U, A, A, G), -8.685535122868178), ((U, G, C, U), -10.06732846047159), ((G, C, C, C), -9.262704958522502), ((A, U, A, C), -8.355373343487601), ((C, G, G, U), -7.7342811781791), ((U, A, G, A), -8.597094100886556), ((U, G, C, A), -8.859769367301153), ((G, C, A, C), -7.923402376383736), ((G, C, U, G), -7.9616965370652295), ((G, C, A, U), -5.75081633821137), ((C, G, C, A), -7.896485193500832), ((U, A, C, G), -5.512353224903258), ((A, U, C, U), -9.098645402003452), ((U, A, A, U), -6.40892227204802), ((G, U, U, G), -9.099308165752445), ((C, G, U, G), -6.657803425922553), ((A, U, C, A), -9.125164438558237), ((A, U, U, C), -9.782833278948328), ((C, G, G, G), -8.778987770101441), ((U, G, A, C), -10.492922067148028), ((G, U, C, A), -10.516004778640099), ((G, C, C, A), -9.221070101217492), ((G, U, C, U), -9.83126509419971), ((U, A, G, G), -9.349080768261766), ((U, G, C, C), -10.82180960528093), ((G, C, C, U), -9.511272247064538), ((A, U, G, C), -5.75081633821137), ((G, U, G, G), -9.77059655249989), ((C, G, C, G), -3.7017264934779837), ((G, C, G, G), -8.987534556352776), ((G, U, A, C), -9.408020137627869), ((C, G, U, U), -8.455217759484889), ((U, G, G, G), -9.577923353898283), ((U, A, A, A), -8.465570875480847), ((U, G, U, G), -6.276805207323712), ((G, U, C, C), -10.542786940400289), ((U, G, A, A), -9.821434758421768), ((G, C, C, G), -6.120157359414484), ((U, G, A, U), -8.27204188546738), ((A, U, A, G), -9.129340284410423), ((G, U, G, U), -6.081863054983047), ((G, C, U, A), -6.64344846717988), ((A, U, G, A), -8.842676407846373), ((G, U, G, A), -8.975429565377164), ((G, C, U, U), -8.500410953738792), ((A, U, G, U), -6.9665828224188555), ((C, G, A, G), -8.192208715865377), ((U, A, C, C), -9.9212937430325), ((G, U, A, A), -9.723455108370066), ((C, G, U, A), -5.512353224903258), ((A, U, C, G), -6.50873062030268), ((U, A, U, G), -7.057867225511414), ].iter().cloned().collect(),
      logpps_with_base_pairs: [((U, A), -6.8621754551705845), ((G, U), -8.517663714263321), ((C, G), -6.451232820630477), ((U, G), -7.876695255550433), ((A, U), -6.682664582789676), ((G, C), -6.786250478002439), ].iter().cloned().collect(),
      legpps_with_base_pairs: [((U, A), -9.65101333633936), ((G, U), -10.003312803276277), ((C, G), -9.124087798703565), ((U, G), -10.548771820084587), ((A, U), -9.843690485950136), ((G, C), -9.282215529456884), ].iter().cloned().collect(),
      llgps_with_base_triples: [((U, A, C), -10.232374644960812), ((U, G, U), -11.36315077297287), ((U, A, U), -10.52217481649568), ((U, G, C), -11.423393458700836), ((C, G, C), -9.79899602702159), ((U, A, A), -9.680953506256342), ((A, U, C), -9.970168752430146), ((G, C, G), -10.339757753278846), ((G, U, G), -11.656607302903902), ((C, G, A), -9.7872754151843), ((A, U, U), -9.996988617769933), ((U, A, G), -10.524929323000283), ((C, G, U), -10.282954881790655), ((A, U, A), -10.376723347101779), ((G, U, U), -10.747613262678229), ((A, U, G), -10.526539629306388), ((G, C, C), -9.421234771152681), ((U, G, G), -10.763826704122296), ((G, U, A), -11.585762974646524), ((C, G, G), -9.520447968716823), ((G, C, A), -10.15713381964147), ((U, G, A), -11.059322842511152), ((G, U, C), -11.055017552103758), ((G, C, U), -10.256070585068468), ].iter().cloned().collect(),
      lrgps_with_base_triples: [((U, A, C), -9.38813269534815), ((U, G, U), -10.760766592444702), ((U, A, U), -9.692835031032846), ((U, G, C), -10.88550303562401), ((C, G, C), -9.3389194417241), ((U, A, A), -10.108832505717388), ((A, U, C), -9.946108912152223), ((G, C, G), -9.418874393919443), ((G, U, G), -10.654315445203144), ((C, G, A), -9.792400099219755), ((A, U, U), -10.26613422932423), ((U, A, G), -10.78969849970844), ((C, G, U), -10.009883219083727), ((A, U, A), -9.18892464074979), ((G, U, U), -11.762522339905203), ((A, U, G), -10.584599050913276), ((G, C, C), -10.31971359162042), ((U, G, G), -11.488402501655774), ((G, U, A), -10.96488665610941), ((C, G, G), -10.348004827256094), ((G, C, A), -8.8617714571064), ((U, G, A), -11.070961202500893), ((G, U, C), -10.774537686135343), ((G, C, U), -10.342052428728799), ].iter().cloned().collect(),
      lbps_with_bases: [(G, -1.3661460514099177), (A, -1.3537389623203675), (U, -1.3574620227820455), (C, -1.4726104829283444), ].iter().cloned().collect(),
    }
  };
}